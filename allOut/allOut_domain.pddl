(define (domain allOut)
(:predicates
	( is-light ?r ?c )
	( on-line-up ?r ?c)
	( on-line-down ?r ?c)
	( on-line-left ?r ?c)
	( on-line-right ?r ?c)
	( next-row ?r1 ?r2 )
	( next-col ?c1 ?c2 )
)

  (:action light-down-line-up 
    :parameters (?row ?col ?prev-col ?next-row ?next-col)
    :precondition (and (is-light ?row ?col)
    			(on-line-up ?row ?col)
    			(not (on-line-down ?row ?col))
    			(not (on-line-left ?row ?col))
    			(not (on-line-right ?row ?col))
    			(next-row ?row ?next-row)
    			(next-col ?prev-col ?col)
    			(next-col ?col ?next-col))
    :effect (and (not (is-light ?row ?col))
    		(when (is-light ?next-row ?col) (not (is-light ?next-row ?col)))
    		(when (is-light ?row ?prev-col) (not (is-light ?row ?prev-col)))
    		(when (is-light ?row ?next-col) (not (is-light ?row ?next-col)))
    		(when (not (is-light ?next-row ?col)) (is-light ?next-row ?col))
    		(when (not (is-light ?row ?prev-col)) (is-light ?row ?prev-col))
    		(when (not (is-light ?row ?next-col)) (is-light ?row ?next-col))
		)
  )
  
    (:action light-up-line-up 
    :parameters (?row ?col ?prev-col ?next-row ?next-col)
    :precondition (and (not (is-light ?row ?col))
    			(on-line-up ?row ?col)
    			(not (on-line-down ?row ?col))
    			(not (on-line-left ?row ?col))
    			(not (on-line-right ?row ?col))
    			(next-row ?row ?next-row)
    			(next-col ?prev-col ?col)
    			(next-col ?col ?next-col))
    :effect (and (is-light ?row ?col)
    		(when (is-light ?next-row ?col) (not (is-light ?next-row ?col)))
    		(when (is-light ?row ?prev-col) (not (is-light ?row ?prev-col)))
    		(when (is-light ?row ?next-col) (not (is-light ?row ?next-col)))
    		(when (not (is-light ?next-row ?col)) (is-light ?next-row ?col))
    		(when (not (is-light ?row ?prev-col)) (is-light ?row ?prev-col))
    		(when (not (is-light ?row ?next-col)) (is-light ?row ?next-col))
		)
  )
  
    (:action light-down-line-down
    :parameters (?row ?col ?prev-col ?prev-row ?next-col)
    :precondition (and (is-light ?row ?col)
    			(on-line-down ?row ?col)
    			(not (on-line-up ?row ?col))
    			(not (on-line-left ?row ?col))
    			(not (on-line-right ?row ?col))
    			(next-row ?prev-row ?row)
    			(next-col ?prev-col ?col)
    			(next-col ?col ?next-col))
    :effect (and (not (is-light ?row ?col))
    		(when (is-light ?prev-row ?col) (not (is-light ?prev-row ?col)))
    		(when (is-light ?row ?prev-col) (not (is-light ?row ?prev-col)))
    		(when (is-light ?row ?next-col) (not (is-light ?row ?next-col)))
    		(when (not (is-light ?prev-row ?col)) (is-light ?prev-row ?col))
    		(when (not (is-light ?row ?prev-col)) (is-light ?row ?prev-col))
    		(when (not (is-light ?row ?next-col)) (is-light ?row ?next-col))
		)
  )
  
  (:action light-up-line-down
    :parameters (?row ?col ?prev-col ?prev-row ?next-col)
    :precondition (and (not (is-light ?row ?col))
    			(on-line-down ?row ?col)
    			(not (on-line-up ?row ?col))
    			(not (on-line-left ?row ?col))
    			(not (on-line-right ?row ?col))
    			(next-row ?prev-row ?row)
    			(next-col ?prev-col ?col)
    			(next-col ?col ?next-col))
    :effect (and (is-light ?row ?col)
    		(when (is-light ?prev-row ?col) (not (is-light ?prev-row ?col)))
    		(when (is-light ?row ?prev-col) (not (is-light ?row ?prev-col)))
    		(when (is-light ?row ?next-col) (not (is-light ?row ?next-col)))
    		(when (not (is-light ?prev-row ?col)) (is-light ?prev-row ?col))
    		(when (not (is-light ?row ?prev-col)) (is-light ?row ?prev-col))
    		(when (not (is-light ?row ?next-col)) (is-light ?row ?next-col))
		)
  )

  (:action light-down-line-left
    :parameters (?row ?col ?next-row ?prev-row ?next-col)
    :precondition (and (is-light ?row ?col)
    			(on-line-left ?row ?col)
    			(not (on-line-up ?row ?col))
    			(not (on-line-down ?row ?col))
    			(not (on-line-right ?row ?col))
    			(next-row ?prev-row ?row)
    			(next-col ?col ?next-col)
    			(next-row ?row ?next-row))
    :effect (and (not (is-light ?row ?col))
    		(when (is-light ?prev-row ?col) (not (is-light ?prev-row ?col)))
    		(when (is-light ?row ?next-col) (not (is-light ?row ?next-col)))
    		(when (is-light ?next-row ?col) (not (is-light ?next-row ?col)))
    		(when (not (is-light ?prev-row ?col)) (is-light ?prev-row ?col))
    		(when (not (is-light ?row ?next-col)) (is-light ?row ?next-col))
    		(when (not (is-light ?next-row ?col)) (is-light ?next-row ?col))
		)
  )
  
  (:action light-up-line-left
    :parameters (?row ?col ?next-row ?prev-row ?next-col)
    :precondition (and (not (is-light ?row ?col))
    			(on-line-left ?row ?col)
    			(not (on-line-up ?row ?col))
    			(not (on-line-down ?row ?col))
    			(not (on-line-right ?row ?col))
    			(next-row ?prev-row ?row)
    			(next-col ?col ?next-col)
    			(next-row ?row ?next-row))
    :effect (and (is-light ?row ?col)
    		(when (is-light ?prev-row ?col) (not (is-light ?prev-row ?col)))
    		(when (is-light ?row ?next-col) (not (is-light ?row ?next-col)))
    		(when (is-light ?next-row ?col) (not (is-light ?next-row ?col)))
    		(when (not (is-light ?prev-row ?col)) (is-light ?prev-row ?col))
    		(when (not (is-light ?row ?next-col)) (is-light ?row ?next-col))
    		(when (not (is-light ?next-row ?col)) (is-light ?next-row ?col))
		)
  )

  (:action light-down-line-right
    :parameters (?row ?col ?next-row ?prev-row ?prev-col)
    :precondition (and (is-light ?row ?col)
    			(on-line-right ?row ?col)
    			(not (on-line-up ?row ?col))
    			(not (on-line-down ?row ?col))
    			(not (on-line-left ?row ?col))
    			(next-row ?prev-row ?row)
    			(next-row ?row ?next-row)
    			(next-col ?prev-col ?col))
    :effect (and (not (is-light ?row ?col))
    		(when (is-light ?prev-row ?col) (not (is-light ?prev-row ?col)))
    		(when (is-light ?row ?prev-col) (not (is-light ?row ?prev-col)))
    		(when (is-light ?next-row ?col) (not (is-light ?next-row ?col)))
    		(when (not (is-light ?prev-row ?col)) (is-light ?prev-row ?col))
    		(when (not (is-light ?row ?prev-col)) (is-light ?row ?prev-col))
    		(when (not (is-light ?next-row ?col)) (is-light ?next-row ?col))
		)
  )

  (:action light-up-line-right
    :parameters (?row ?col ?next-row ?prev-row ?prev-col)
    :precondition (and (not (is-light ?row ?col))
    			(on-line-right ?row ?col)
    			(not (on-line-up ?row ?col))
    			(not (on-line-down ?row ?col))
    			(not (on-line-left ?row ?col))
    			(next-row ?prev-row ?row)
    			(next-row ?row ?next-row)
    			(next-col ?prev-col ?col))
    :effect (and (is-light ?row ?col)
    		(when (is-light ?prev-row ?col) (not (is-light ?prev-row ?col)))
    		(when (is-light ?row ?prev-col) (not (is-light ?row ?prev-col)))
    		(when (is-light ?next-row ?col) (not (is-light ?next-row ?col)))
    		(when (not (is-light ?prev-row ?col)) (is-light ?prev-row ?col))
    		(when (not (is-light ?row ?prev-col)) (is-light ?row ?prev-col))
    		(when (not (is-light ?next-row ?col)) (is-light ?next-row ?col))
		)
  )
  
  (:action light-down-corner-up-left
    :parameters (?row ?col ?next-row ?next-col)
    :precondition (and (is-light ?row ?col)
    			(on-line-up ?row ?col)
    			(on-line-left ?row ?col)
    			(not (on-line-right ?row ?col))
    			(not (on-line-down ?row ?col))
    			(next-row ?row ?next-row)
    			(next-col ?col ?next-col))
    :effect (and (not (is-light ?row ?col))
    		(when (is-light ?next-row ?col) (not (is-light ?next-row ?col)))
    		(when (is-light ?row ?next-col) (not (is-light ?row ?next-col)))
    		(when (not (is-light ?next-row ?col)) (is-light ?next-row ?col))
    		(when (not (is-light ?row ?next-col)) (is-light ?row ?next-col))
		)
  )
  
   (:action light-up-corner-up-left
    :parameters (?row ?col ?next-row ?next-col)
    :precondition (and (not (is-light ?row ?col))
    			(on-line-up ?row ?col)
    			(on-line-left ?row ?col)
    			(not (on-line-right ?row ?col))
    			(not (on-line-down ?row ?col))
    			(next-row ?row ?next-row)
    			(next-col ?col ?next-col))
    :effect (and (is-light ?row ?col)
    		(when (is-light ?next-row ?col) (not (is-light ?next-row ?col)))
    		(when (is-light ?row ?next-col) (not (is-light ?row ?next-col)))
    		(when (not (is-light ?next-row ?col)) (is-light ?next-row ?col))
    		(when (not (is-light ?row ?next-col)) (is-light ?row ?next-col))
		)
  )
  
   (:action light-down-corner-up-right
    :parameters (?row ?col ?next-row ?prev-col)
    :precondition (and (is-light ?row ?col)
    			(on-line-up ?row ?col)
    			(on-line-right ?row ?col)
    			(not (on-line-left ?row ?col))
    			(not (on-line-down ?row ?col))
    			(next-row ?row ?next-row)
    			(next-col ?prev-col ?col))
    :effect (and (not (is-light ?row ?col))
    		(when (is-light ?next-row ?col) (not (is-light ?next-row ?col)))
    		(when (is-light ?row ?prev-col) (not (is-light ?row ?prev-col)))
    		(when (not (is-light ?next-row ?col)) (is-light ?next-row ?col))
    		(when (not (is-light ?row ?prev-col)) (is-light ?row ?prev-col))
		)
  )
  
   (:action light-up-corner-up-right
    :parameters (?row ?col ?next-row ?prev-col)
    :precondition (and (not (is-light ?row ?col))
    			(on-line-up ?row ?col)
    			(on-line-right ?row ?col)
    			(not (on-line-left ?row ?col))
    			(not (on-line-down ?row ?col))
    			(next-row ?row ?next-row)
    			(next-col ?prev-col ?col))
    :effect (and (is-light ?row ?col)
    		(when (is-light ?next-row ?col) (not (is-light ?next-row ?col)))
    		(when (is-light ?row ?prev-col) (not (is-light ?row ?prev-col)))
    		(when (not (is-light ?next-row ?col)) (is-light ?next-row ?col))
    		(when (not (is-light ?row ?prev-col)) (is-light ?row ?prev-col))
		)
  )
  
  (:action light-down-corner-down-right
    :parameters (?row ?col ?prev-row ?prev-col)
    :precondition (and (is-light ?row ?col)
    			(on-line-down ?row ?col)
    			(on-line-right ?row ?col)
    			(not (on-line-left ?row ?col))
    			(not (on-line-up ?row ?col))
    			(next-row ?prev-row ?row)
    			(next-col ?prev-col ?col))
    :effect (and (not (is-light ?row ?col))
    		(when (is-light ?prev-row ?col) (not (is-light ?prev-row ?col)))
    		(when (is-light ?row ?prev-col) (not (is-light ?row ?prev-col)))
    		(when (not (is-light ?prev-row ?col)) (is-light ?prev-row ?col))
    		(when (not (is-light ?row ?prev-col)) (is-light ?row ?prev-col))
		)
  )

  (:action light-up-corner-down-right
    :parameters (?row ?col ?prev-row ?prev-col)
    :precondition (and (not (is-light ?row ?col))
    			(on-line-down ?row ?col)
    			(on-line-right ?row ?col)
    			(not (on-line-left ?row ?col))
    			(not (on-line-up ?row ?col))
    			(next-row ?prev-row ?row)
    			(next-col ?prev-col ?col))
    :effect (and (is-light ?row ?col)
    		(when (is-light ?prev-row ?col) (not (is-light ?prev-row ?col)))
    		(when (is-light ?row ?prev-col) (not (is-light ?row ?prev-col)))
    		(when (not (is-light ?prev-row ?col)) (is-light ?prev-row ?col))
    		(when (not (is-light ?row ?prev-col)) (is-light ?row ?prev-col))
		)
  )
  
  (:action light-down-corner-down-left
    :parameters (?row ?col ?prev-row ?next-col)
    :precondition (and (is-light ?row ?col)
    			(on-line-down ?row ?col)
    			(on-line-left ?row ?col)
    			(not (on-line-right ?row ?col))
    			(not (on-line-up ?row ?col))
    			(next-row ?prev-row ?row)
    			(next-col ?col ?next-col))
    :effect (and (not (is-light ?row ?col))
    		(when (is-light ?prev-row ?col) (not (is-light ?prev-row ?col)))
    		(when (is-light ?row ?next-col) (not (is-light ?row ?next-col)))
    		(when (not (is-light ?prev-row ?col)) (is-light ?prev-row ?col))
    		(when (not (is-light ?row ?next-col)) (is-light ?row ?next-col))
		)
  )  

  (:action light-up-corner-down-left
    :parameters (?row ?col ?prev-row ?next-col)
    :precondition (and (not (is-light ?row ?col))
    			(on-line-down ?row ?col)
    			(on-line-left ?row ?col)
    			(not (on-line-right ?row ?col))
    			(not (on-line-up ?row ?col))
    			(next-row ?prev-row ?row)
    			(next-col ?col ?next-col))
    :effect (and (is-light ?row ?col)
    		(when (is-light ?prev-row ?col) (not (is-light ?prev-row ?col)))
    		(when (is-light ?row ?next-col) (not (is-light ?row ?next-col)))
    		(when (not (is-light ?prev-row ?col)) (is-light ?prev-row ?col))
    		(when (not (is-light ?row ?next-col)) (is-light ?row ?next-col))
		)
  ) 
   				  
  (:action light-up
    :parameters (?row ?col ?prev-row ?next-row ?prev-col ?next-col)
    :precondition (and (not (is-light ?row ?col))
	    		(not (on-line-up ?row ?col))
	    		(not (on-line-down ?row ?col))
	    		(not (on-line-right ?row ?col))
	    		(not (on-line-left ?row ?col))
    			(next-row ?prev-row ?row)
    			(next-row ?row ?next-row)
    			(next-col ?prev-col ?col)
    			(next-col ?col ?next-col))
    :effect (and (is-light ?row ?col) 
    		(when (is-light ?prev-row ?col) (not (is-light ?prev-row ?col)))
    		(when (is-light ?next-row ?col) (not (is-light ?next-row ?col)))
    		(when (is-light ?row ?prev-col) (not (is-light ?row ?prev-col)))
    		(when (is-light ?row ?next-col) (not (is-light ?row ?next-col)))
    		(when (not (is-light ?prev-row ?col)) (is-light ?prev-row ?col))
    		(when (not (is-light ?next-row ?col)) (is-light ?next-row ?col))
    		(when (not (is-light ?row ?prev-col)) (is-light ?row ?prev-col))
    		(when (not (is-light ?row ?next-col)) (is-light ?row ?next-col))
		)
	)
	
  (:action light-down 
    :parameters (?row ?col ?prev-row ?next-row ?prev-col ?next-col)
    :precondition (and (is-light ?row ?col)
    	    		(not (on-line-up ?row ?col))
	    		(not (on-line-down ?row ?col))
	    		(not (on-line-right ?row ?col))
	    		(not (on-line-left ?row ?col))
    			(next-row ?prev-row ?row)
    			(next-row ?row ?next-row)
    			(next-col ?prev-col ?col)
    			(next-col ?col ?next-col))
    :effect (and (not (is-light ?row ?col))
    		(when (is-light ?prev-row ?col) (not (is-light ?prev-row ?col)))
    		(when (is-light ?next-row ?col) (not (is-light ?next-row ?col)))
    		(when (is-light ?row ?prev-col) (not (is-light ?row ?prev-col)))
    		(when (is-light ?row ?next-col) (not (is-light ?row ?next-col)))
    		(when (not (is-light ?prev-row ?col)) (is-light ?prev-row ?col))
    		(when (not (is-light ?next-row ?col)) (is-light ?next-row ?col))
    		(when (not (is-light ?row ?prev-col)) (is-light ?row ?prev-col))
    		(when (not (is-light ?row ?next-col)) (is-light ?row ?next-col))
		)
  )
  
  (:action senseLIGHT
  	:parameters (?row ?col)
  	:observe (is-light ?row ?col))	
  	
)

  
